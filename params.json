{
  "name": "Alterant",
  "tagline": "",
  "body": "# Usage\r\nAlterant uses git as a backend for storage. The structure is simple, each\r\n`branch` within a repository is considered to be a `machine` and is orphaned.\r\nWithin each `machine`, a YAML file named after the `machine` is used to describe\r\nhow a `machine` is to be provisioned. To generate a new `machine`:\r\n````\r\nalterant new test_machine\r\n````\r\n\r\nLet's edit `test_machine.yaml` to be:\r\n````yaml\r\ntasks:\r\n  test1:\r\n     dependencies:\r\n      - \"test2\"\r\n    links:\r\n      -\r\n        target: \"test1\"\r\n        destination: \"test1\"\r\n    commands:\r\n        - \"echo Test1\"\r\n  test2:\r\n    dependencies:\r\n      - \"test3\"\r\n    links:\r\n      -\r\n        target:  \"test2\"\r\n        destination: \"test2\"\r\n    commands:\r\n      - |\r\n        #!/usr/bin/env bash\r\n\r\n        # This is a multiline command that is useful for scripts\r\n        echo Test2\r\n  test3:\r\n    links:\r\n      -\r\n        target:  \"test3\"\r\n        destination: \"test3\"\r\n        encrypted: true\r\n````\r\nWe can see from of our `test_machine.yaml` that a `task` has three fields.\r\n* `dependencies`\r\n* `links`\r\n* `commands`\r\n\r\n#### Dependencies\r\nA task can be dependent on multiple other tasks in order for it to successfully\r\nfinish. Alterant will automatically resolve the order that a `machine` should\r\nbe provisioned. In this case our `tasks` will be executed in the order:\r\n`test3` -> `test2` -> `test1`\r\n\r\n#### Links\r\nA `link` is specified assuming that the `target` is relative to the repository\r\nroot, and that the `destination` is relative to `$HOME`. Alterant uses OpenPGP\r\nfor encryption of sensitive data. A file can be encrypted using the\r\n`encrypted: true` flag for the `target` file. To generate a key-pair used for\r\nencryption/decryption:\r\n````\r\n$ alterant gen-key \"NAME\" \"COMMENT\" \"EMAIL\"\r\n````\r\n\r\nThe keys are generated and placed at `~/.alterant/{pubring.gpg,secring.gpg}`.\r\nBe sure to add the unencrypted file to your `.gitignore` (test3 in the case of\r\nour example).\r\n\r\n#### Commands\r\nA `command` can be any script/command you would run from a shell. They can be\r\nformatted as single line, or multiline.\r\n\r\n### Provisioning\r\nWith our machine ready for deployment we push the changes upstream. Alterant can\r\nnow use the machine for provisioning:\r\n````\r\n$ alterant --verbose provision --clobber --parents https:/path/to/dotfiles.git test_machine\r\n````",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}